
{-# OPTIONS_GHC -cpp -XMagicHash #-}
{- For Hugs, use the option -F"cpp -P -traditional" -}

module MixColumnsCircuit where

import qualified Prelude
import qualified BinNat
import qualified BitVectorOps
import qualified CavaClass
import qualified CavaPrelude
import qualified CombinationalMonad
import qualified IdentityMonad
import qualified Monad
import qualified Ndigits
import qualified Netlist
import qualified NetlistGeneration
import qualified Pkg
import qualified Signal
import qualified StateMonad
import qualified Traversable
import qualified Vector
import qualified VectorUtils

#ifdef __GLASGOW_HASKELL__
import qualified GHC.Base
#else
-- HUGS
import qualified IOExts
#endif

#ifdef __GLASGOW_HASKELL__
unsafeCoerce :: a -> b
unsafeCoerce = GHC.Base.unsafeCoerce#
#else
-- HUGS
unsafeCoerce :: a -> b
unsafeCoerce = IOExts.unsafeCoerce
#endif

#ifdef __GLASGOW_HASKELL__
type Any = GHC.Base.Any
#else
-- HUGS
type Any = ()
#endif

aes_mix_single_column :: 
(CavaClass.Cava
a1) ->
(Monad.Monad
(CavaClass.Coq_cava
a1 
Any)) ->
a1 -> a1
->
CavaClass.Coq_cava
a1 
a1
aes_mix_single_column semantics monad op_i data_i =
  
let {
x = Vector.Coq_cons
((,)
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
data_i 0)
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
data_i
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))
(Vector.Coq_cons
((,)
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
data_i
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
data_i
(Prelude.succ
(Prelude.succ
0))))
(Prelude.succ
(Prelude.succ
0))
(Vector.Coq_cons
((,)
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
data_i
(Prelude.succ
(Prelude.succ
0)))
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
data_i
(Prelude.succ
0)))
(Prelude.succ
0)
(Vector.Coq_cons
((,)
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
data_i
(Prelude.succ
0))
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
data_i 0))
0
Vector.Coq_nil)))}
in
Monad.bind
monad
(Traversable.mapT
(unsafeCoerce
VectorUtils.coq_Traversable_vector
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))
(Monad.coq_Applicative_Monad
monad)
(BitVectorOps.xorV
semantics
monad
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
x)
(\x0 ->
Monad.bind
monad
(Traversable.mapT
(unsafeCoerce
VectorUtils.coq_Traversable_vector
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))
(Monad.coq_Applicative_Monad
monad)
(Pkg.aes_mul2
semantics
monad)
x0)
(\x_mul2 ->
let {
x1 = 
CavaClass.unpeel
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))) x0}
in
let {
x_mul3 = 
CavaClass.unpeel
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
x_mul2}
in
Monad.bind
monad
(BitVectorOps.xorv
semantics
monad
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))))))
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
data_i
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
data_i
(Prelude.succ
0)))
(\y_pre_mul4_0 ->
Monad.bind
monad
(BitVectorOps.xorv
semantics
monad
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))))))
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
data_i
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
data_i
(Prelude.succ
0)))
(\y_pre_mul4_1 ->
Monad.bind
monad
(Traversable.mapT
(VectorUtils.coq_Traversable_vector
(Prelude.succ
(Prelude.succ
0)))
(Monad.coq_Applicative_Monad
monad)
(Pkg.aes_mul4
semantics
monad)
(Vector.Coq_cons
y_pre_mul4_0
(Prelude.succ
0)
(Vector.Coq_cons
y_pre_mul4_1
0
Vector.Coq_nil)))
(\y ->
let {
y0 = 
CavaClass.unpeel
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
0)) y}
in
Monad.bind
monad
(BitVectorOps.xorv
semantics
monad
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))))))
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
0)) y0 0)
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
0)) y0
(Prelude.succ
0)))
(\y2_pre_mul2 ->
Monad.bind
monad
(Pkg.aes_mul2
semantics
monad
y2_pre_mul2)
(\y2 ->
Monad.bind
monad
(BitVectorOps.xorv
semantics
monad
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))))))
y2
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
0)) y0 0))
(\z_0 ->
Monad.bind
monad
(BitVectorOps.xorv
semantics
monad
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))))))
y2
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
0)) y0
(Prelude.succ
0)))
(\z_1 ->
let {
z = 
CavaClass.unpeel
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
0))
(Vector.Coq_cons
z_0
(Prelude.succ
0)
(Vector.Coq_cons
z_1 0
Vector.Coq_nil))}
in
Monad.bind
monad
(CavaClass.inv
semantics
op_i)
(\_ ->
Monad.bind
monad
(CavaPrelude.muxPair
semantics
monad
(Signal.Vec
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
0))) op_i
((,)
(CavaClass.unpeel
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
0))
(Vector.Coq_cons
(Pkg.zero_byte
semantics)
(Prelude.succ
0)
(Vector.Coq_cons
(Pkg.zero_byte
semantics)
0
Vector.Coq_nil)))
z))
(\z_muxed ->
Monad.bind
monad
(Monad.bind
monad
(Monad.bind
monad
(BitVectorOps.xorv
semantics
monad
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))))))
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
data_i
(Prelude.succ
0))
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
x_mul3
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))
(BitVectorOps.xorv
semantics
monad
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))))))
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))) x1
(Prelude.succ
0))))
(BitVectorOps.xorv
semantics
monad
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))))))
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
0))
z_muxed
(Prelude.succ
0))))
(\data_o0 ->
Monad.bind
monad
(Monad.bind
monad
(Monad.bind
monad
(BitVectorOps.xorv
semantics
monad
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))))))
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
data_i 0)
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
x_mul3
(Prelude.succ
(Prelude.succ
0))))
(BitVectorOps.xorv
semantics
monad
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))))))
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))) x1
(Prelude.succ
0))))
(BitVectorOps.xorv
semantics
monad
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))))))
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
0))
z_muxed
0)))
(\data_o1 ->
Monad.bind
monad
(Monad.bind
monad
(Monad.bind
monad
(BitVectorOps.xorv
semantics
monad
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))))))
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
data_i
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
x_mul3
(Prelude.succ
0)))
(BitVectorOps.xorv
semantics
monad
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))))))
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))) x1
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))))
(BitVectorOps.xorv
semantics
monad
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))))))
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
0))
z_muxed
(Prelude.succ
0))))
(\data_o2 ->
Monad.bind
monad
(Monad.bind
monad
(Monad.bind
monad
(BitVectorOps.xorv
semantics
monad
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))))))
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
data_i
(Prelude.succ
(Prelude.succ
0)))
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
x_mul3 0))
(BitVectorOps.xorv
semantics
monad
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))))))
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))) x1
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))))
(BitVectorOps.xorv
semantics
monad
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))))))
(CavaClass.indexConst
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
0))
z_muxed
0)))
(\data_o3 ->
Monad.ret
monad
(CavaClass.unpeel
semantics
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
(Vector.Coq_cons
data_o0
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))
(Vector.Coq_cons
data_o1
(Prelude.succ
(Prelude.succ
0))
(Vector.Coq_cons
data_o2
(Prelude.succ
0)
(Vector.Coq_cons
data_o3 0
Vector.Coq_nil))))))))))))))))))))

aes_mix_columns :: 
(CavaClass.Cava
a1) ->
(Monad.Monad
(CavaClass.Coq_cava
a1 
Any)) ->
a1 -> a1
->
CavaClass.Coq_cava
a1 
a1
aes_mix_columns semantics monad op_i a =
  
let {
transposed = 
Pkg.aes_transpose
semantics
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))) a}
in
Monad.bind
monad
(Traversable.mapT
(unsafeCoerce
VectorUtils.coq_Traversable_vector
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))
(Monad.coq_Applicative_Monad
monad)
(aes_mix_single_column
semantics
monad
op_i)
(CavaClass.peel
semantics
(Signal.Vec
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
transposed))
(\mixed ->
Monad.ret
monad
(Pkg.aes_transpose
semantics
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
(CavaClass.unpeel
semantics
(Signal.Vec
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))
mixed)))

aes_mix_columns_Interface :: 
Netlist.CircuitInterface
aes_mix_columns_Interface =
  
Netlist.combinationalInterface
"aes_mix_columns"
((:)
(Netlist.Coq_mkPort
"op_i"
Signal.Bit)
((:)
(Netlist.Coq_mkPort
"data_i"
(Signal.Vec
(Signal.Vec
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))))
([])))
((:)
(Netlist.Coq_mkPort
"data_o"
(Signal.Vec
(Signal.Vec
(Signal.Vec
Signal.Bit
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))))
([]))
([])

aes_mix_columns_Netlist :: 
Netlist.CavaState
aes_mix_columns_Netlist =
  
Netlist.makeNetlist
aes_mix_columns_Interface
(\pat ->
case 
unsafeCoerce
pat of {
 (,) op_i
data_i ->
unsafeCoerce
aes_mix_columns
NetlistGeneration.coq_CavaCombinationalNet
StateMonad.coq_Monad_state
op_i
data_i})

mixColTest1InputNat :: 
Vector.Coq_t
(Vector.Coq_t
Prelude.Integer)
mixColTest1InputNat =
  
Vector.Coq_cons
(Vector.Coq_cons
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))
(Vector.Coq_cons
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))))))))))))
(Prelude.succ
(Prelude.succ
0))
(Vector.Coq_cons
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(Prelude.succ
0)
(Vector.Coq_cons
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
0
Vector.Coq_nil))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))
(Vector.Coq_cons
(Vector.Coq_cons
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))
(Vector.Coq_cons
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))))))))
(Prelude.succ
(Prelude.succ
0))
(Vector.Coq_cons
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))))))))))))))))))))))))))))))))
(Prelude.succ
0)
(Vector.Coq_cons
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
0
Vector.Coq_nil))))
(Prelude.succ
(Prelude.succ
0))
(Vector.Coq_cons
(Vector.Coq_cons
(Prelude.succ
0)
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))
(Vector.Coq_cons
(Prelude.succ
0)
(Prelude.succ
(Prelude.succ
0))
(Vector.Coq_cons
(Prelude.succ
0)
(Prelude.succ
0)
(Vector.Coq_cons
(Prelude.succ
0) 0
Vector.Coq_nil))))
(Prelude.succ
0)
(Vector.Coq_cons
(Vector.Coq_cons
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))))))))))))))))))))))))))))))))))))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))
(Vector.Coq_cons
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))))))))))))))))))))))))))))))))))))
(Prelude.succ
(Prelude.succ
0))
(Vector.Coq_cons
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))))))))))))))))))))))))))))))))))))))))))))))
(Prelude.succ
0)
(Vector.Coq_cons
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
0
Vector.Coq_nil))))
0
Vector.Coq_nil)))

fromNatVec :: 
(Vector.Coq_t
(Vector.Coq_t
Prelude.Integer))
->
Vector.Coq_t
(Vector.Coq_t
(Vector.Coq_t
Prelude.Bool))
fromNatVec i =
  
Vector.map
(Vector.map
(\v ->
Ndigits.coq_N2Bv_sized
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))))))
(BinNat._N__of_nat
v))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))) i

toNatVec :: 
(Vector.Coq_t
(Vector.Coq_t
(Vector.Coq_t
Prelude.Bool)))
->
Vector.Coq_t
(Vector.Coq_t
Prelude.Integer)
toNatVec i =
  
Vector.map
(Vector.map
(\v ->
BinNat._N__to_nat
(Ndigits.coq_Bv2N
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0))))))))
v))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))))
(Prelude.succ
(Prelude.succ
(Prelude.succ
(Prelude.succ
0)))) i

mix_cols_i1 :: 
Vector.Coq_t
(Vector.Coq_t
(Vector.Coq_t
Prelude.Bool))
mix_cols_i1 =
  
fromNatVec
mixColTest1InputNat

mix_cols_expected_outputs :: 
([])
(Vector.Coq_t
(Vector.Coq_t
(Vector.Coq_t
Prelude.Bool)))
mix_cols_expected_outputs =
  
CombinationalMonad.combinational
(aes_mix_columns
(unsafeCoerce
CombinationalMonad.coq_CombinationalSemantics)
(unsafeCoerce
IdentityMonad.coq_Monad_ident)
((:)
(unsafeCoerce
Prelude.False)
([]))
((:)
mix_cols_i1
([])))

aes_mix_columns_tb :: 
Netlist.TestBench
aes_mix_columns_tb =
  
Netlist.testBench
"aes_mix_columns_tb"
aes_mix_columns_Interface
((:)
(unsafeCoerce
((,)
Prelude.False
mix_cols_i1))
([]))
(unsafeCoerce
mix_cols_expected_outputs)

